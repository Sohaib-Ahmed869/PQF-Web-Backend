const mongoose = require("mongoose");
const Schema = mongoose.Schema;

// Line Tax Jurisdiction Schema
const LineTaxJurisdictionSchema = new Schema({}, { strict: false });

// Document Line Additional Expenses Schema
const DocumentLineAdditionalExpenseSchema = new Schema({}, { strict: false });

// Withholding Tax Line Schema
const WithholdingTaxLineSchema = new Schema({}, { strict: false });

// Serial Number Schema
const SerialNumberSchema = new Schema({}, { strict: false });

// Batch Number Schema
const BatchNumberSchema = new Schema({}, { strict: false });

// Document Lines Bin Allocation Schema
const DocumentLinesBinAllocationSchema = new Schema({}, { strict: false });

// Document Line Schema
const DocumentLineSchema = new Schema({
  // All existing DocumentLineSchema fields remain the same
  LineNum: Number,
  ItemCode: String,
  ItemDescription: String,
  Quantity: Number,
  ShipDate: Date,
  Price: Number,
  PriceAfterVAT: Number,
  Currency: String,
  Rate: Number,
  DiscountPercent: Number,
  VendorNum: String,
  SerialNum: String,
  WarehouseCode: String,
  PriceList: {
    type: Number,
    default: 2, // Default to Prix Livraison (2)
  },
  SalesPersonCode: Number,
  CommisionPercent: Number,
  TreeType: String,
  AccountCode: String,
  UseBaseUnits: String,
  PriceAfterVAT: Number,
  VatGroup: String,
  LineTotalWithVAT: Number,
  SupplierCatNum: String,
  CostingCode: String,
  ProjectCode: String,
  BarCode: String,
  VatGroup: String,
  Height1: Number,
  Hight1Unit: Number,
  Height2: Number,
  Height2Unit: Number,
  Lengh1: Number,
  Lengh1Unit: Number,
  Lengh2: Number,
  Lengh2Unit: Number,
  Weight1: Number,
  Weight1Unit: Number,
  Weight2: Number,
  Weight2Unit: Number,
  Factor1: Number,
  Factor2: Number,
  Factor3: Number,
  Factor4: Number,
  BaseType: Number,
  BaseEntry: Number,
  BaseLine: Number,
  Volume: Number,
  VolumeUnit: Number,
  Width1: Number,
  Width1Unit: Number,
  Width2: Number,
  Width2Unit: Number,
  Address: String,
  TaxCode: String,
  TaxType: String,
  TaxLiable: String,
  PickStatus: String,
  PickQuantity: Number,
  PickListIdNumber: Number,
  OriginalItem: String,
  BackOrder: String,
  FreeText: String,
  ShippingMethod: Number,
  POTargetNum: Number,
  POTargetEntry: String,
  POTargetRowNum: Number,
  CorrectionInvoiceItem: String,
  CorrInvAmountToStock: Number,
  CorrInvAmountToDiffAcct: Number,
  AppliedTax: Number,
  AppliedTaxFC: Number,
  AppliedTaxSC: Number,
  WTLiable: String,
  DeferredTax: String,
  EqualizationTaxPercent: Number,
  TotalEqualizationTax: Number,
  TotalEqualizationTaxFC: Number,
  TotalEqualizationTaxSC: Number,
  NetTaxAmount: Number,
  NetTaxAmountFC: Number,
  NetTaxAmountSC: Number,
  MeasureUnit: String,
  UnitsOfMeasurment: Number,
  LineTotal: Number,
  TaxPercentagePerRow: Number,
  TaxTotal: Number,
  ConsumerSalesForecast: String,
  ExciseAmount: Number,
  TaxPerUnit: Number,
  TotalInclTax: Number,
  CountryOrg: String,
  SWW: String,
  TransactionType: Number,
  DistributeExpense: String,
  RowTotalFC: Number,
  RowTotalSC: Number,
  LastBuyInmPrice: Number,
  LastBuyDistributeSumFc: Number,
  LastBuyDistributeSumSc: Number,
  LastBuyDistributeSum: Number,
  StockDistributesumForeign: Number,
  StockDistributesumSystem: Number,
  StockDistributesum: Number,
  StockInmPrice: Number,
  PickStatusEx: String,
  TaxBeforeDPM: Number,
  TaxBeforeDPMFC: Number,
  TaxBeforeDPMSC: Number,
  CFOPCode: String,
  CSTCode: String,
  Usage: String,
  TaxOnly: String,
  VisualOrder: Number,
  BaseOpenQuantity: Number,
  UnitPrice: Number,
  LineStatus: String,
  PackageQuantity: Number,
  Text: String,
  LineType: String,
  COGSCostingCode: String,
  COGSAccountCode: String,
  ChangeAssemlyBoMWarehouse: String,
  GrossBuyPrice: Number,
  GrossBase: Number,
  GrossProfitTotalBasePrice: Number,
  CostingCode2: String,
  CostingCode3: String,
  CostingCode4: String,
  CostingCode5: String,
  ItemDetails: String,
  LocationCode: String,
  ActualDeliveryDate: Date,
  RemainingOpenQuantity: Number,
  OpenAmount: Number,
  OpenAmountFC: Number,
  OpenAmountSC: Number,
  ExLineNo: String,
  RequiredDate: Date,
  RequiredQuantity: Number,
  COGSCostingCode2: String,
  COGSCostingCode3: String,
  COGSCostingCode4: String,
  COGSCostingCode5: String,
  CSTforIPI: String,
  CSTforPIS: String,
  CSTforCOFINS: String,
  CreditOriginCode: String,
  WithoutInventoryMovement: String,
  AgreementNo: String,
  AgreementRowNumber: Number,
  ActualBaseEntry: Number,
  ActualBaseLine: Number,
  DocEntry: Number,
  Surpluses: Number,
  DefectAndBreakup: Number,
  Shortages: Number,
  ConsiderQuantity: String,
  PartialRetirement: String,
  RetirementQuantity: Number,
  RetirementAPC: Number,
  ThirdParty: String,
  PoNum: String,
  PoItmNum: String,
  ExpenseType: String,
  ReceiptNumber: String,
  ExpenseOperationType: String,
  FederalTaxID: String,
  GrossProfit: Number,
  GrossProfitFC: Number,
  GrossProfitSC: Number,
  PriceSource: String,
  StgSeqNum: Number,
  StgEntry: Number,
  StgDesc: String,
  UoMEntry: Number,
  UoMCode: String,
  InventoryQuantity: Number,
  RemainingOpenInventoryQuantity: Number,
  ParentLineNum: Number,
  Incoterms: Number,
  TransportMode: Number,
  NatureOfTransaction: String,
  DestinationCountryForImport: String,
  DestinationRegionForImport: String,
  OriginCountryForExport: String,
  OriginRegionForExport: String,
  ItemType: String,
  ChangeInventoryQuantityIndependently: String,
  FreeOfChargeBP: String,
  SACEntry: Number,
  HSNEntry: Number,
  GrossPrice: Number,
  GrossTotal: Number,
  GrossTotalFC: Number,
  GrossTotalSC: Number,
  NCMCode: Number,
  NVECode: String,
  IndEscala: String,
  CtrSealQty: Number,
  CNJPMan: String,
  CESTCode: String,
  UFFiscalBenefitCode: String,
  ShipToCode: String,
  ShipToDescription: String,
  OwnerCode: String,
  ExternalCalcTaxRate: Number,
  ExternalCalcTaxAmount: Number,
  ExternalCalcTaxAmountFC: Number,
  ExternalCalcTaxAmountSC: Number,
  StandardItemIdentification: String,
  CommodityClassification: String,
  UnencumberedReason: String,
  CUSplit: String,
  U_PromotionName: String,
  U_PromotionExpiry: Date,
  U_FreeStock: String,
  U_CATEID: String,
  LineTaxJurisdictions: [LineTaxJurisdictionSchema],
  DocumentLineAdditionalExpenses: [DocumentLineAdditionalExpenseSchema],
  WithholdingTaxLines: [WithholdingTaxLineSchema],
  SerialNumbers: [SerialNumberSchema],
  BatchNumbers: [BatchNumberSchema],
  DocumentLinesBinAllocations: [DocumentLinesBinAllocationSchema],
});

// Document Approval Request Schema
const DocumentApprovalRequestSchema = new Schema({}, { strict: false });

// Main Order Schema
const OrderSchema = new Schema(
  {
    DocEntry: {
      type: Number,
      required: true,
    },
    salesAgent: {
      type: Schema.Types.ObjectId,
      ref: "User",
    },
    DocNum: Number,
    DocType: String,
    HandWritten: String,
    Printed: String,
    DocDate: Date,
    DocDueDate: Date,
    CardCode: String,
    CardName: String,
    Address: String,
    NumAtCard: String,
    DocTotal: Number,
    AttachmentEntry: Number,
    DocCurrency: String,
    DocRate: Number,
    Reference1: String,
    Reference2: String,
    Comments: String,
    JournalMemo: String,
    PaymentGroupCode: Number,
    DocTime: String,
    SalesPersonCode: Number,
    TransportationCode: Number,
    Confirmed: String,
    ImportFileNum: Number,
    SummeryType: String,
    ContactPersonCode: Number,
    ShowSCN: String,
    Series: Number,
    TaxDate: Date,
    PartialSupply: String,
    DocObjectCode: String,
    ShipToCode: String,
    Indicator: String,
    FederalTaxID: String,
    DiscountPercent: Number,
    PaymentReference: String,
    CreationDate: Date,
    UpdateDate: Date,
    FinancialPeriod: Number,
    UserSign: Number,
    TransNum: Number,
    VatSum: Number,
    VatSumSys: Number,
    VatSumFc: Number,
    NetProcedure: String,
    DocTotalFc: Number,
    DocTotalSys: Number,
    Form1099: Number,
    Box1099: String,
    RevisionPo: String,
    RequriedDate: Date,
    CancelDate: Date,
    BlockDunning: String,
    Submitted: String,
    Segment: Number,
    PickStatus: String,
    Pick: String,
    PaymentMethod: String,
    PaymentBlock: String,
    PaymentBlockEntry: Number,
    CentralBankIndicator: String,
    MaximumCashDiscount: String,
    Reserve: String,
    Project: String,
    ExemptionValidityDateFrom: Date,
    ExemptionValidityDateTo: Date,
    WareHouseUpdateType: String,
    Rounding: String,
    ExternalCorrectedDocNum: String,
    InternalCorrectedDocNum: Number,
    NextCorrectingDocument: Number,
    DeferredTax: String,
    TaxExemptionLetterNum: String,
    WTApplied: Number,
    WTAppliedFC: Number,
    BillOfExchangeReserved: String,
    AgentCode: String,
    WTAppliedSC: Number,
    TotalEqualizationTax: Number,
    TotalEqualizationTaxFC: Number,
    TotalEqualizationTaxSC: Number,
    NumberOfInstallments: Number,
    ApplyTaxOnFirstInstallment: String,
    WTNonSubjectAmount: Number,
    WTNonSubjectAmountSC: Number,
    WTNonSubjectAmountFC: Number,
    WTExemptedAmount: Number,
    WTExemptedAmountSC: Number,
    WTExemptedAmountFC: Number,
    BaseAmount: Number,
    BaseAmountSC: Number,
    BaseAmountFC: Number,
    WTAmount: Number,
    WTAmountSC: Number,
    WTAmountFC: Number,
    VatDate: Date,
    DocumentsOwner: Number,
    FolioPrefixString: String,
    FolioNumber: Number,
    DocumentSubType: String,
    BPChannelCode: String,
    BPChannelContact: Number,
    Address2: String,
    DocumentStatus: String,
    PeriodIndicator: String,
    PayToCode: String,
    ManualNumber: String,
    UseShpdGoodsAct: String,
    IsPayToBank: String,
    PayToBankCountry: String,
    PayToBankCode: String,
    PayToBankAccountNo: String,
    PayToBankBranch: String,
    BPL_IDAssignedToInvoice: Number,
    DownPayment: Number,
    ReserveInvoice: String,
    LanguageCode: Number,
    TrackingNumber: String,
    PickRemark: String,
    ClosingDate: Date,
    SequenceCode: Number,
    SequenceSerial: Number,
    SeriesString: String,
    SubSeriesString: String,
    SequenceModel: String,
    UseCorrectionVATGroup: String,
    TotalDiscount: Number,
    DownPaymentAmount: Number,
    DownPaymentPercentage: Number,
    DownPaymentType: String,
    DownPaymentAmountSC: Number,
    DownPaymentAmountFC: Number,
    VatPercent: Number,
    ServiceGrossProfitPercent: Number,
    OpeningRemarks: String,
    ClosingRemarks: String,
    RoundingDiffAmount: Number,
    RoundingDiffAmountFC: Number,
    RoundingDiffAmountSC: Number,
    Cancelled: String,
    SignatureInputMessage: String,
    SignatureDigest: String,
    CertificationNumber: String,
    PrivateKeyVersion: Number,
    ControlAccount: String,
    InsuranceOperation347: String,
    ArchiveNonremovableSalesQuotation: String,
    GTSChecker: Number,
    GTSPayee: Number,
    ExtraMonth: Number,
    ExtraDays: Number,
    CashDiscountDateOffset: Number,
    StartFrom: String,
    NTSApproved: String,
    ETaxWebSite: Number,
    ETaxNumber: String,
    NTSApprovedNumber: String,
    EDocGenerationType: String,
    EDocSeries: Number,
    EDocNum: String,
    EDocExportFormat: Number,
    EDocStatus: String,
    EDocErrorCode: String,
    EDocErrorMessage: String,
    DownPaymentStatus: String,
    GroupSeries: Number,
    GroupNumber: Number,
    GroupHandWritten: String,
    ReopenOriginalDocument: String,
    ReopenManuallyClosedOrCanceledDocument: String,
    CreateOnlineQuotation: String,
    POSEquipmentNumber: String,
    POSManufacturerSerialNumber: String,
    POSCashierNumber: String,
    ApplyCurrentVATRatesForDownPaymentsToDraw: String,
    ClosingOption: String,
    SpecifiedClosingDate: Date,
    OpenForLandedCosts: String,
    AuthorizationStatus: String,
    TotalDiscountFC: Number,
    TotalDiscountSC: Number,
    RelevantToGTS: String,
    BPLName: String,
    VATRegNum: String,
    AnnualInvoiceDeclarationReference: String,
    Supplier: String,
    Releaser: String,
    Receiver: String,
    BlanketAgreementNumber: String,
    IsAlteration: String,
    CancelStatus: String,
    AssetValueDate: Date,
    DocumentDelivery: String,
    AuthorizationCode: String,
    StartDeliveryDate: Date,
    StartDeliveryTime: String,
    EndDeliveryDate: Date,
    EndDeliveryTime: String,
    VehiclePlate: String,
    ATDocumentType: String,
    ElecCommStatus: String,
    ElecCommMessage: String,
    ReuseDocumentNum: String,
    ReuseNotaFiscalNum: String,
    PrintSEPADirect: String,
    FiscalDocNum: String,
    POSDailySummaryNo: String,
    POSReceiptNo: String,
    PointOfIssueCode: String,
    Letter: String,
    FolioNumberFrom: String,
    FolioNumberTo: String,
    InterimType: String,
    RelatedType: Number,
    RelatedEntry: Number,
    SAPPassport: String,
    DocumentTaxID: String,
    DateOfReportingControlStatementVAT: Date,
    ReportingSectionControlStatementVAT: String,
    ExcludeFromTaxReportControlStatementVAT: String,
    POS_CashRegister: Number,
    UpdateTime: String,
    CreateQRCodeFrom: String,
    PriceMode: String,
    PriceList: {
      type: Number,
      default: 2, // Default to Prix Livraison (2)
    },
    ShipFrom: String,
    CommissionTrade: String,
    CommissionTradeReturn: String,
    UseBillToAddrToDetermineTax: String,
    DocTotalWithVAT: Number,
    VatSum: Number,
    Cig: String,
    Cup: String,
    FatherCard: String,
    FatherType: String,
    ShipState: String,
    ShipPlace: String,
    CustOffice: String,
    FCI: String,
    AddLegIn: String,
    LegTextF: String,
    DANFELgTxt: String,
    IndFinal: String,
    DataVersion: Number,
    // Custom fields
    U_Route: String,
    U_Notes: String,
    U_CCSurcharge: String,
    U_SurchargeRate: Number,
    U_PrintedDate: Date,
    U_HHEmpID: String,
    U_EPOSNo: String,
    U_B1IFDocEntry: String,
    U_U_ROUTENUMBER: String,
    U_U_ROUTEPAYMETHOD: String,
    U_U_ROUTEORDER: String,
    U_U_ROUTEPAYAMOUNT: String,
    salesAgent: {
      type: mongoose.Schema.Types.ObjectId,
      ref: "User",
    },
    Document_ApprovalRequests: [DocumentApprovalRequestSchema],
    DocumentLines: [DocumentLineSchema],
    // Add these fields to the SalesOrder schema
    OriginatingQuotation: Number,
    CancelReason: String,
    CancelDate: Date,

    // SAP Integration fields
    SyncedWithSAP: {
      type: Boolean,
      default: false,
    },
    SAPDocEntry: Number,
    LocalStatus: {
      type: String,
      enum: ["Created", "Synced", "SyncFailed"],
      default: "Created",
    },
    SyncErrors: String,
    LastSyncAttempt: Date,
    SAPSyncDisabled: {
      type: Boolean,
      default: false,
    },

    // Payment link integration
    Payment_id: String,
    Link_sent: {
      type: Boolean,
      default: false,
    },
    payment_status: String,

    // Add payment reference
    payment: { type: Schema.Types.ObjectId, ref: 'PQFPayment' },
    paymentMethod: { 
      type: String, 
      enum: ['card', 'cash', 'cheque', 'bank_transfer'], 
      default: 'card',
      required: true
    },
    // Add user field to track who placed the order
    user: {
      type: mongoose.Schema.Types.ObjectId,
      ref: 'User',
      required: false,
    },

    // Add orderItems array
    orderItems: [
      {
        name: String,
        price: Number,
        quantity: Number,
        product: String,
        image: String
      }
    ],

    // Add shippingAddress and billingAddress
    shippingAddress: {
      address: String,
      city: String,
      postalCode: String,
      country: String
    },
    billingAddress: {
      address: String,
      city: String,
      postalCode: String,
      country: String
    },

    // Add notes field
    notes: String,
    orderType: { type: String, enum: ['delivery', 'pickup'], default: 'delivery' },
    pickupStore: { type: mongoose.Schema.Types.Mixed, default: null },
    // Store reference
    store: { type: Schema.Types.ObjectId, ref: 'Store', required: false },

    // Order tracking fields
    trackingNumber: { type: String, default: null },
    trackingStatus: { type: String, enum: ['pending', 'shipped', 'in transit', 'delivered', 'cancelled'], default: 'pending' },
    trackingHistory: [
      {
        status: { type: String, required: true },
        timestamp: { type: Date, default: Date.now },
        note: { type: String, default: '' },
        updatedBy: { type: String },
        previousStatus: { type: String }
      }
    ],


  },
  {
    timestamps: true,
    collection: "SalesOrders",
  }
);
// Indexes
OrderSchema.index({ DocEntry: 1 });
OrderSchema.index({ CardCode: 1 });
OrderSchema.index({ DocDate: 1 });
OrderSchema.index({ DocumentStatus: 1 });
const SalesOrder = mongoose.model("SalesOrder", OrderSchema);
module.exports = SalesOrder;
